package com.cyse6225.spring2020.courseservice.service;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map.Entry;

import com.cyse6225.spring2020.courseservice.datamodel.Course;
import com.cyse6225.spring2020.courseservice.datamodel.InMemoryDatabase;

public class CourseService {

	private static HashMap<String, Course> courseMap = InMemoryDatabase.getCourseDB();

	/*
	 * Add course
	 */
	public void addCourse(String courseId, String courseName, String lectureId, String professorId, String courseTa) {
		courseMap.put(courseId, new Course(courseId, courseName, lectureId, professorId, courseTa));
	}

	/*
	 * Delete course
	 */
	public void deleteCourse(String courseId) {
		if (!courseId.isEmpty()) {
			courseMap.remove(courseId);
		}
	}

	// Getting a list of all professor
	// GET "..webapi/professors"
	public List<Course> getAllCourses() {
		// Getting the list
		ArrayList<Course> list = new ArrayList<>();
		for (Course prof : courseMap.values()) {
			list.add(prof);
		}
		return list;
	}

	/*
	 * Get students enrolled in course
	 */
	public List<String> getStudentFromCourse(String courseName) {
		List<String> studentNameList = new ArrayList<String>();

		return studentNameList;
	}

	/*
	 * Get professor for course
	 */
	public String getProfessorforCourse(String courseName) {
		String courseId = getIdbyCourseName(courseName);
		if (!courseId.isEmpty()) {
			return courseMap.get(courseId).getProfessorId();
		}
		return null;
	}

	/*
	 * Get lecture details for course
	 */
	public String getLectureDetailsforCourse(String courseName) {
		String courseId = getIdbyCourseName(courseName);
		if (!courseId.isEmpty()) {
			return courseMap.get(courseId).getLectureId();
		}
		return null;
	}

	/*
	 * Get TA for course
	 */
	public String getTAforCourse(String courseName) {
		String courseId = getIdbyCourseName(courseName);
		if (!courseId.isEmpty()) {
			return courseMap.get(courseId).getCourseTA();
		}
		return null;
	}

	/*
	 * Get Course ID for Course Name
	 */
	public String getIdbyCourseName(String courseName) {
		if (!courseName.isEmpty()) {
			for (Entry<String, Course> course : courseMap.entrySet()) {
				if (course.getValue().getCourseName().equals(courseName)) {
					return course.getKey();
				}
			}
		}
		return null;
	}

	public List<Course> getCoursesByCourseId(List<String> courseIds) {
		List<Course> courses = new ArrayList<Course>();
		for (String courseId : courseIds) {
			courses.add(courseMap.get(courseId));
		}
		System.out.println(courses);
		return courses;
	}

	public HashMap<String, Course> getCourseMap() {
		return courseMap;
	}
}
